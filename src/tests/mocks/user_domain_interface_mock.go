// Code generated by MockGen. DO NOT EDIT.
// Source: src/application/domain/user_domain_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	rest_errors "github.com/Doehnert/crud-hexa/src/configuration/rest_errors"
	gomock "go.uber.org/mock/gomock"
)

// MockUserDomainInterface is a mock of UserDomainInterface interface.
type MockUserDomainInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserDomainInterfaceMockRecorder
}

// MockUserDomainInterfaceMockRecorder is the mock recorder for MockUserDomainInterface.
type MockUserDomainInterfaceMockRecorder struct {
	mock *MockUserDomainInterface
}

// NewMockUserDomainInterface creates a new mock instance.
func NewMockUserDomainInterface(ctrl *gomock.Controller) *MockUserDomainInterface {
	mock := &MockUserDomainInterface{ctrl: ctrl}
	mock.recorder = &MockUserDomainInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDomainInterface) EXPECT() *MockUserDomainInterfaceMockRecorder {
	return m.recorder
}

// EncryptPassword mocks base method.
func (m *MockUserDomainInterface) EncryptPassword() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EncryptPassword")
}

// EncryptPassword indicates an expected call of EncryptPassword.
func (mr *MockUserDomainInterfaceMockRecorder) EncryptPassword() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptPassword", reflect.TypeOf((*MockUserDomainInterface)(nil).EncryptPassword))
}

// GenerateToken mocks base method.
func (m *MockUserDomainInterface) GenerateToken() (string, *rest_errors.RestErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*rest_errors.RestErr)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockUserDomainInterfaceMockRecorder) GenerateToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockUserDomainInterface)(nil).GenerateToken))
}
